#!/usr/bin/env bash

# pde is a script for opening my 'personalised development environment'
# it is primarily concerned with creating/attaching/switching tmux sessions
# this is somewhat similar to the well-known tmux-sessionizer script:
# https://github.com/ThePrimeagen/.dotfiles

display_help(){
	echo ""
	echo "pde sets up your 'personalised development environment'"
	echo ""
	echo "pde looks for a tmux session with the given name, then attaches or switches to it if possible"
	echo "If no session with that name exists, pde creates one, and sets up my preferred dev env with three windows:"
	echo "  0. nvim"
	echo "  1. lazygit"
	echo "  2. shell (with fish, htop, and nvidia-smi in separate panes)"
	echo ""
	echo "Usage: pde [NAME | -f | --find | -h | --help]"
	echo "NAME: The name of the tmux session to create"
	echo "-f | --find : opens fzf for selecting a name from the list of currently running sessions"
	echo "If no args are given, the name is generated from the basename of the current working directory"
	echo ""
	echo "Examples:"
	echo "   pde                    # Creates/attaches/switches to a session named after the current directory"
	echo "   pde my_session_name    # Creates/attaches/switches to a session named 'my_session_name'"
	echo "   pde -f                 # Opens fzf to select one of the currently running sessions to attach/switch to"
	echo "   pde -h                 # Displays this help message"
	echo ""

}

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    display_help
    exit 0
fi

DEFAULT_SESSION_NAME=$(basename "$(pwd)")
SESSION_NAME=${1:-$DEFAULT_SESSION_NAME} # name given as arg overrides basename default

SESSION_NAME="${SESSION_NAME//./_}" # Replace dots with underscores
SESSION_NAME="${SESSION_NAME// /_}" # Replace spaces with underscores

if [[ "$1" == "-f" || "$1" == "--find" ]]; then
	FZF_SESSION_NAME=$(tmux list-sessions -F "#S" | fzf)
	if [[ -z $FZF_SESSION_NAME ]]; then
		# no fzf selection made
		exit 0
	fi
	SESSION_NAME=$FZF_SESSION_NAME # fzf overrides any other session name when used
fi

if tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
	if [[ -n $TMUX ]]; then
		tmux switch-client -t "$SESSION_NAME"
	else
		tmux attach -t "$SESSION_NAME"
	fi
else
	read -p "Session '$SESSION_NAME' does not exist. Create it? [y/N] " -n 1 -r choice
	case "$choice" in
		y|Y ) echo "";;
		* ) echo ""; exit 0;;
	esac

	tmux new-session -s "$SESSION_NAME" -n nvim -d
	tmux new-window -t  "$SESSION_NAME":1  -n lazygit
	tmux new-window -t "$SESSION_NAME":2 -n shell
	tmux send-keys -t "$SESSION_NAME":0 'nvim' C-m
	tmux send-keys -t "$SESSION_NAME":1 'lazygit' C-m
	# commented out line below because I already have fish as my default shell in tmux.conf
	# tmux send-keys -t $SESSION_NAME:2 'fish' C-m
	tmux split-window -t "$SESSION_NAME":2 -h -l 20% "watch nvidia-smi"
	tmux split-window -t "$SESSION_NAME":2 -v "htop"
	tmux select-pane -t "$SESSION_NAME":2.0

	if [[ -n $TMUX ]]; then
		tmux switch-client -t "$SESSION_NAME"
	else
		tmux attach -t "$SESSION_NAME"
	fi
fi
